<!-- main.handlebars -->
<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <title>Productos en Tiempo Real</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>
  <div class="container my-5">
    {{{body}}}
  </div>

  <button onclick="openCartModal()">Abrir Carrito</button>

  <!-- Modal del Carrito -->
  <div class="modal fade" id="cartModal" tabindex="-1" aria-labelledby="cartModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-end">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="cartModalLabel">Changuito de Compras</h5>
          <!-- Botón de cierre con onclick para llamar la función closeCartModal -->
          <button type="button" class="btn-close" onclick="closeCartModal()" aria-label="Cerrar"></button>
        </div>
        <div class="modal-body">
          <div id="cartItemsContainer">
            <!-- Los productos se cargarán aquí dinámicamente -->
            <ul id="lista-carrito"></ul>
          </div>
          <hr>
          <p id="totalCarrito"><strong>Total: $0</strong></p>
        </div>
        <div class="modal-footer">
          <!-- Botón de cerrar que también cierra el modal -->
          <button type="button" class="btn btn-secondary" onclick="closeCartModal()">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    // Inicialización del modal de carrito
    const cartModal = new bootstrap.Modal(document.getElementById('cartModal'));

    // Función para abrir el modal del carrito
    function openCartModal() {
      cartModal.show();
    }

    // Función para cerrar el modal manualmente
    function closeCartModal() {
      cartModal.hide(); // Cierra el modal
    }

    // Función para agregar un producto al carrito
    function agregarAlCarrito(id) {
      fetch(`/api/carts/addToCart/681e2c5c65ff140e72d5210e/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        }
      })
        .then(res => res.json())
        .then(data => {
          if (data.result === "ok") {
            console.log("Producto agregado al carrito correctamente:", data.payload);
            alert("Producto agregado al carrito");
            actualizarVistaCarrito('681e2c5c65ff140e72d5210e');
            cartModal.show();  // Abre el modal después de agregar el producto
          } else {
            console.error("Error al agregar al carrito:", data.message);
            alert("No se pudo agregar al carrito: " + data.message);
          }
        })
        .catch(error => {
          console.error("Error de red o del servidor:", error);
          alert("Error al intentar agregar al carrito.");
        });
    }

    // Función para actualizar la vista del carrito
    function actualizarVistaCarrito(idCarrito) {
      fetch(`/api/carts/${idCarrito}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('No se pudo obtener el carrito');
          }
          return response.json();
        })
        .then(data => {
          console.log('Carrito recibido:', data); // 🧪 Esto te mostrará la estructura
          const productos = data.payload.products;
          const contenedor = document.getElementById('lista-carrito');
          contenedor.innerHTML = ''; // Limpiamos el contenido previo

          const maxProductosVisibles = 5;
          let totalCarrito = 0; // Inicializamos el total en 0

          productos.slice(0, maxProductosVisibles).forEach(producto => {
            const item = document.createElement('li');
            item.textContent = `${producto.title} - $${producto.price} x ${producto.quantity}`;
            contenedor.appendChild(item);

            // Calculamos el total sumando el precio por la cantidad
            totalCarrito += producto.price * producto.quantity;
          });

          if (productos.length > maxProductosVisibles) {
            const restantes = productos.length - maxProductosVisibles;
            const item = document.createElement('li');
            item.textContent = `... y ${restantes} más`;
            contenedor.appendChild(item);
          }

          // Actualizamos el total en la vista
          document.getElementById('totalCarrito').innerHTML = `<strong>Total: $${totalCarrito.toFixed(2)}</strong>`;
        })
        .catch(error => {
          console.error('Error al obtener el carrito:', error);
        });
    }

    // Función para eliminar un producto
    function eliminarProducto(id) {
      Swal.fire({
        title: '¿Estás seguro?',
        text: '¡No podrás revertir esta acción!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Sí, eliminarlo',
        cancelButtonText: 'Cancelar'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/api/products/${id}`, {
            method: 'DELETE',
          })
            .then(res => {
              if (res.ok) {
                Swal.fire(
                  'Eliminado!',
                  'El producto ha sido eliminado.',
                  'success'
                );
                location.reload(); // Recarga la vista
              } else {
                Swal.fire(
                  'Error!',
                  'No se pudo eliminar el producto.',
                  'error'
                );
              }
            })
            .catch(err => {
              console.error('Error al eliminar producto:', err);
              Swal.fire(
                'Error!',
                'Ocurrió un error al eliminar el producto.',
                'error'
              );
            });
        }
      });
    }

    // Función para mostrar modal de edición
    function editarProducto(_id, title, description, price, product_number, stock, category) {
      Swal.fire({
        title: 'Editar Producto',
        html: `
          <div><strong>Título:</strong> <input type="text" id="editTitle" class="swal2-input" value="${title}" /></div>
          <div><strong>Descripción:</strong> <textarea id="editDescription" class="swal2-textarea">${description}</textarea></div>
          <div><strong>Precio:</strong> <input type="number" id="editPrice" class="swal2-input" value="${price}" /></div>
          <div><strong>Código:</strong> <input type="text" id="editCode" class="swal2-input" value="${product_number}" /></div>
          <div><strong>Stock:</strong> <input type="number" id="editStock" class="swal2-input" value="${stock}" /></div>
          <div><strong>Categoría:</strong> <input type="text" id="editCategory" class="swal2-input" value="${category}" /></div>
        `,
        icon: 'info',
        showCancelButton: true,
        confirmButtonText: 'Aceptar',
        cancelButtonText: 'Cancelar',
        preConfirm: () => {
          // Recuperamos los valores editados
          return {
            title: document.getElementById('editTitle').value,
            description: document.getElementById('editDescription').value,
            price: document.getElementById('editPrice').value,
            product_number: document.getElementById('editCode').value,
            stock: document.getElementById('editStock').value,
            category: document.getElementById('editCategory').value
          };
        }
      }).then((result) => {
        if (result.isConfirmed) {
          // Llamada a la API para actualizar el producto
          const editedProduct = result.value;
          fetch(`/api/products/${_id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(editedProduct) // Enviamos los datos editados en el cuerpo de la petición
          })
            .then(response => response.json())
            .then(updatedProduct => {
              if (updatedProduct) {
                Swal.fire(
                  'Editado!',
                  'El producto ha sido editado.',
                  'success'
                );
                location.reload(); // Recarga la vista
              }
            })
            .catch(err => {
              console.error('Error al editar producto:', err);
              Swal.fire(
                'Error!',
                'Hubo un problema al actualizar el producto.',
                'error'
              );
            });
        }
      });
    }
  </script>

</body>

</html>
